
//This file should be called F_position.h
//This is autogenerated code. Edit by hand at your peril!

#include <stdint.h>
#include <stdbool.h>

//the dtimer_t type
typedef uint64_t dtimer_t;

//For each policy, we need an enum type for the state machine

enum position_policy_safe_states { 
	POLICY_STATE_position_safe_rabbit, 
	POLICY_STATE_position_safe_wolves 
};


//Inputs to the function position
typedef struct {
	int32_t rx;
	int32_t ry;
	int32_t w1x;
	int32_t w1y;
	int32_t w2x;
	int32_t w2y;
	
} inputs_position_t;

//Outputs from the function position
typedef struct {
	int32_t new_rx;
	int32_t new_ry;
	int32_t new_w1x;
	int32_t new_w1y;
	int32_t new_w2x;
	int32_t new_w2y;
	
} outputs_position_t;

//enforcer state and vars:
typedef struct {
	enum position_policy_safe_states _policy_safe_state;
	//internal vars
	dtimer_t turn_timer;
	int32_t boundry;
	
	
} enforcervars_position_t;

//This function is provided in "F_position.c"
//It sets up the variable structures to their initial values
void position_init_all_vars(enforcervars_position_t* me, inputs_position_t* inputs, outputs_position_t* outputs);

//This function is provided in "F_position.c"
//It will run the synthesised enforcer and call the controller function
void position_run_via_enforcer(enforcervars_position_t* me, inputs_position_t* inputs, outputs_position_t* outputs);

//This function is provided from the user
//It is the controller function
extern void position_run(inputs_position_t* inputs, outputs_position_t* outputs);

//enforcer functions


//This function is provided in "F_position.c"
//It will run the input enforcer for position's policy safe
void position_run_input_enforcer_safe(enforcervars_position_t* me, inputs_position_t* inputs);

//This function is provided in "F_position.c"
//It will run the input enforcer for position's policy safe
void position_run_output_enforcer_safe(enforcervars_position_t* me, inputs_position_t* inputs, outputs_position_t* outputs);

